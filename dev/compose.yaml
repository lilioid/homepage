name: homepage

services:
  db:
    image: docker.io/postgres:17
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${COMPOSE_PROJECT_NAME}
      - POSTGRES_PASSWORD=${COMPOSE_PROJECT_NAME}
      - POSTGRES_DB=${COMPOSE_PROJECT_NAME}

  webserver: &app
    build:
      context: ../
      dockerfile: dev/Containerfile
      target: deps
      args:
        APP_UID: "${APP_UID:-1000}"
    restart: on-failure
    depends_on: [ backend, frontend ]
    volumes:
      - "../backend/:/usr/local/src/homepage/backend/"
      - "../frontend/:/usr/local/src/homepage/frontend/"
      - "./dev.nginx.conf:/etc/nginx/http.d/default.conf"
    env_file: [ dev.env ]
    network_mode: host
    entrypoint: [ "nginx", "-g", "daemon off;" ]
    develop:
      watch:
        - path: dev.nginx.conf
          target: /etc/nginx/http.d/default.conf
          action: sync+restart

  backend:
    <<: *app
    depends_on: [ db ]
    entrypoint:
      - "sh"
      - "-c"
      - |
        set -e
        cd ./backend
        uv sync --active
        ./manage.py migrate
        exec ./manage.py runserver localhost:8081
    develop:
      watch:
        - path: ../backend/uv.lock
          action: rebuild

  frontend:
    <<: *app
    depends_on: []
    entrypoint:
      - "sh"
      - "-c"
      - |
        cd ./frontend/
        pnpm install --offline --store-dir /usr/local/share/homepage/pnpm-store
        exec pnpm run dev
    environment:
      NUXT_BACKEND_URL: "http://localhost:8081"
    develop:
      watch:
        - path: ../frontend/pnpm-lock.yaml
          action: rebuild

  interact:
    <<: *app
    stdin_open: true
    entrypoint: [ "cat", "-" ]
    stop_signal: SIGKILL

volumes:
  db:
    name: "${COMPOSE_PROJECT_NAME}-dev-db"
